require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/subscriptions", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Subscription. As you add validations to Subscription, be sure to
  # adjust the attributes here as well.
  before :each do
    @tea = Tea.create!(title: "Drink UP", description: "Black Mud", temperature: 100, brew_time: 'hour')

    @customer_1 = Customer.create!(first_name: "Just", last_name: "Jones", email: "email@email.com", address: "123 Address St")
    @customer_2 = Customer.create!(first_name: "First 2", last_name: "Last 2", email: "email2@email.com", address: "234 Address St")

  end
  let(:valid_attributes) do
    {
    "title": "Subscription 1",
     "price": "11.99",
     "status": 0,
     "frequency": 0,
     "customer_id": @customer_1.id,
     "tea_id": @tea.id
  }
  end

  let(:invalid_attributes) do
    {
    "title": "Subscription 1",
     "price": "11.99",
     "customer_id": 1,
     "tea_id": 1
  }
end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # SubscriptionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      # require "pry"; binding.pry
      Subscription.create! valid_attributes
      get  "/api/v1/customers/#{@customer_1.id}/subscriptions" , headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      subscription = Subscription.create! valid_attributes
      get  "/api/v1/customers/#{@customer_1.id}/subscriptions/#{subscription.id}", as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Subscription" do
        expect {
          post "/api/v1/customers/#{@customer_1.id}/subscriptions",
               params: { subscription: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Subscription, :count).by(1)
      end

      it "renders a JSON response with the new subscription" do
        post "/api/v1/customers/#{@customer_1.id}/subscriptions",
             params: { subscription: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Subscription" do
        expect {
          post "/api/v1/customers/#{@customer_1.id}/subscriptions",
               params: { subscription: invalid_attributes }, as: :json
        }.to change(Subscription, :count).by(0)
      end

      it "renders a JSON response with errors for the new subscription" do
        post "/api/v1/customers/#{@customer_1.id}/subscriptions",
             params: { subscription: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to_not be_successful
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        valid_attributes = {
          "title": "Subscription 2",
           "price": "5.99",
           "status": 0,
           "frequency": 0,
           "customer_id": 1,
           "tea_id": 1
        }
      }

      it "updates the requested subscription" do
        subscription = Subscription.create! valid_attributes
        patch  "/api/v1/customers/#{@customer_1.id}/subscriptions/#{subscription.id}",
              params: { subscription: new_attributes }, headers: valid_headers, as: :json
        subscription.reload
        expect(response).to be_successful
      end

      it "renders a JSON response with the subscription" do
        subscription = Subscription.create! valid_attributes
        patch  "/api/v1/customers/#{@customer_1.id}/subscriptions/#{subscription.id}",
              params: { subscription: new_attributes }, headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the subscription" do
        subscription = Subscription.create! valid_attributes
        patch  "/api/v1/customers/#{@customer_1.id}/subscriptions/#{subscription.id}",
              params: { subscription: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to_not be_successful
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested subscription" do
      subscription = Subscription.create! valid_attributes
      delete  "/api/v1/customers/#{@customer_2.id}/subscriptions/#{subscription.id}", headers: valid_headers, as: :json
      expect(Subscription.count).to eq(0)
    end
  end
end
